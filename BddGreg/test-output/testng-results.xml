<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="6" passed="5" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-06-08T10:15:37 IST" name="BDD Demo" finished-at="2021-06-08T10:16:14 IST" duration-ms="37114">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2021-06-08T10:15:37 IST" name="Test" finished-at="2021-06-08T10:16:14 IST" duration-ms="37114">
      <class name="StepDefinitions.TestRunner">
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="setUpClass" finished-at="2021-06-08T10:15:39 IST" duration-ms="466" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-06-08T10:16:02 IST" duration-ms="22566" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Check login is succesful with valid credential"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Test Login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-06-08T10:16:06 IST" duration-ms="26572" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Check login is succesful with valid credential"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Test Login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-06-08T10:16:14 IST" duration-ms="35331" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["validate title on 3schools  page"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Test Tiltle on the 3schools page]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-06-08T10:16:02 IST" duration-ms="23012" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Check login is succesful with valid credential"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Test Login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-06-08T10:15:39 IST" duration-ms="421" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Check on mortgage query"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[KBC motrgage]"]]>
              </value>
            </param>
          </params>
          <exception class="io.cucumber.testng.UndefinedStepException">
            <message>
              <![CDATA[There were 6 undefined steps
The step "KBC page open" is undefined. You can implement it using the snippet(s) below:

@Given("KBC page open")
public void kbc_page_open() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "Select KBC Mortgage tag" is undefined. You can implement it using the snippet(s) below:

@Given("Select KBC Mortgage tag")
public void select_kbc_mortgage_tag() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "Click on Started Button" is undefined. You can implement it using the snippet(s) below:

@Given("Click on Started Button")
public void click_on_started_button() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "navigate to selection applicants" is undefined. You can implement it using the snippet(s) below:

@When("navigate to selection applicants")
public void navigate_to_selection_applicants() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "select numbers of applicants" is undefined. You can implement it using the snippet(s) below:

@When("select numbers of applicants")
public void select_numbers_of_applicants() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "Click Next Button on Page" is undefined. You can implement it using the snippet(s) below:

@Then("Click Next Button on Page")
public void click_next_button_on_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.cucumber.testng.UndefinedStepException: There were 6 undefined steps
The step "KBC page open" is undefined. You can implement it using the snippet(s) below:

@Given("KBC page open")
public void kbc_page_open() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "Select KBC Mortgage tag" is undefined. You can implement it using the snippet(s) below:

@Given("Select KBC Mortgage tag")
public void select_kbc_mortgage_tag() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "Click on Started Button" is undefined. You can implement it using the snippet(s) below:

@Given("Click on Started Button")
public void click_on_started_button() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "navigate to selection applicants" is undefined. You can implement it using the snippet(s) below:

@When("navigate to selection applicants")
public void navigate_to_selection_applicants() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "select numbers of applicants" is undefined. You can implement it using the snippet(s) below:

@When("select numbers of applicants")
public void select_numbers_of_applicants() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

The step "Click Next Button on Page" is undefined. You can implement it using the snippet(s) below:

@Then("Click Next Button on Page")
public void click_next_button_on_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:113)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:77)
at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:15)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- io.cucumber.testng.UndefinedStepException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:15:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2021-06-08T10:16:02 IST" duration-ms="22986" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Check login is succesful with valid credential"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Test Login functionality]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:StepDefinitions.TestRunner@d5b810e]" started-at="2021-06-08T10:16:14 IST" name="tearDownClass" finished-at="2021-06-08T10:16:14 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- StepDefinitions.TestRunner -->
    </test> <!-- Test -->
  </suite> <!-- BDD Demo -->
</testng-results>
